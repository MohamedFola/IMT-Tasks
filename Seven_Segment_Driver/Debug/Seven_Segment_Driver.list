
Seven_Segment_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000504  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08000698  08000698  00010698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080006a0  080006a0  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080006a0  080006a0  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006a0  080006a0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006a0  080006a0  000106a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080006a4  080006a4  000106a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080006a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000018  080006c0  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000034  080006c0  00020034  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   000006bd  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000035c  00000000  00000000  00020705  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000100  00000000  00000000  00020a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000a8  00000000  00000000  00020b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001d85  00000000  00000000  00020c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000006e3  00000000  00000000  00022995  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008270  00000000  00000000  00023078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0002b2e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000244  00000000  00000000  0002b338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000018 	.word	0x20000018
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000680 	.word	0x08000680

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000001c 	.word	0x2000001c
 80001d0:	08000680 	.word	0x08000680

080001d4 <GPIO_SetPinValue>:
#include "GPIO_private.h"
#include "GPIO_config.h"
#include "GPIO_interface.h"

void GPIO_SetPinValue(u8 Copy_u8PortName, u8 Copy_u8PinNumber, u16 Copy_u8Value)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
 80001de:	460b      	mov	r3, r1
 80001e0:	71bb      	strb	r3, [r7, #6]
 80001e2:	4613      	mov	r3, r2
 80001e4:	80bb      	strh	r3, [r7, #4]
	u8 Local_u8PinNumber = (Copy_u8PinNumber) + (16 * (Copy_u8Value == GPIO_PIN_LOW));
 80001e6:	88bb      	ldrh	r3, [r7, #4]
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d101      	bne.n	80001f0 <GPIO_SetPinValue+0x1c>
 80001ec:	2210      	movs	r2, #16
 80001ee:	e000      	b.n	80001f2 <GPIO_SetPinValue+0x1e>
 80001f0:	2200      	movs	r2, #0
 80001f2:	79bb      	ldrb	r3, [r7, #6]
 80001f4:	4413      	add	r3, r2
 80001f6:	73fb      	strb	r3, [r7, #15]
	SET_BIT(GPIOx_BSRR(Copy_u8PortName), Local_u8PinNumber);
 80001f8:	79fb      	ldrb	r3, [r7, #7]
 80001fa:	029b      	lsls	r3, r3, #10
 80001fc:	461a      	mov	r2, r3
 80001fe:	4b0a      	ldr	r3, [pc, #40]	; (8000228 <GPIO_SetPinValue+0x54>)
 8000200:	4413      	add	r3, r2
 8000202:	6819      	ldr	r1, [r3, #0]
 8000204:	7bfb      	ldrb	r3, [r7, #15]
 8000206:	2201      	movs	r2, #1
 8000208:	409a      	lsls	r2, r3
 800020a:	79fb      	ldrb	r3, [r7, #7]
 800020c:	029b      	lsls	r3, r3, #10
 800020e:	4618      	mov	r0, r3
 8000210:	4b05      	ldr	r3, [pc, #20]	; (8000228 <GPIO_SetPinValue+0x54>)
 8000212:	4403      	add	r3, r0
 8000214:	4618      	mov	r0, r3
 8000216:	ea41 0302 	orr.w	r3, r1, r2
 800021a:	6003      	str	r3, [r0, #0]
}
 800021c:	bf00      	nop
 800021e:	3714      	adds	r7, #20
 8000220:	46bd      	mov	sp, r7
 8000222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000226:	4770      	bx	lr
 8000228:	40020018 	.word	0x40020018

0800022c <GPIO_SetChannelValue>:

void GPIO_SetChannelValue(u8 Copy_u8PortName, u8 Copy_u8PinNumber, u8 Copy_u8ChannelLength, u16 Copy_u8Value)
{
 800022c:	b490      	push	{r4, r7}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0
 8000232:	4604      	mov	r4, r0
 8000234:	4608      	mov	r0, r1
 8000236:	4611      	mov	r1, r2
 8000238:	461a      	mov	r2, r3
 800023a:	4623      	mov	r3, r4
 800023c:	71fb      	strb	r3, [r7, #7]
 800023e:	4603      	mov	r3, r0
 8000240:	71bb      	strb	r3, [r7, #6]
 8000242:	460b      	mov	r3, r1
 8000244:	717b      	strb	r3, [r7, #5]
 8000246:	4613      	mov	r3, r2
 8000248:	807b      	strh	r3, [r7, #2]
	GPIOx_ODR(Copy_u8PortName) = BitManipulationSetBits(GPIOx_ODR(Copy_u8PortName), Copy_u8PinNumber, Copy_u8ChannelLength, Copy_u8Value);
 800024a:	79fb      	ldrb	r3, [r7, #7]
 800024c:	029b      	lsls	r3, r3, #10
 800024e:	461a      	mov	r2, r3
 8000250:	4b12      	ldr	r3, [pc, #72]	; (800029c <GPIO_SetChannelValue+0x70>)
 8000252:	4413      	add	r3, r2
 8000254:	681a      	ldr	r2, [r3, #0]
 8000256:	797b      	ldrb	r3, [r7, #5]
 8000258:	2101      	movs	r1, #1
 800025a:	fa01 f303 	lsl.w	r3, r1, r3
 800025e:	1e59      	subs	r1, r3, #1
 8000260:	79bb      	ldrb	r3, [r7, #6]
 8000262:	fa01 f303 	lsl.w	r3, r1, r3
 8000266:	43db      	mvns	r3, r3
 8000268:	ea02 0103 	and.w	r1, r2, r3
 800026c:	887a      	ldrh	r2, [r7, #2]
 800026e:	797b      	ldrb	r3, [r7, #5]
 8000270:	f04f 30ff 	mov.w	r0, #4294967295
 8000274:	fa00 f303 	lsl.w	r3, r0, r3
 8000278:	43db      	mvns	r3, r3
 800027a:	401a      	ands	r2, r3
 800027c:	79bb      	ldrb	r3, [r7, #6]
 800027e:	409a      	lsls	r2, r3
 8000280:	79fb      	ldrb	r3, [r7, #7]
 8000282:	029b      	lsls	r3, r3, #10
 8000284:	4618      	mov	r0, r3
 8000286:	4b05      	ldr	r3, [pc, #20]	; (800029c <GPIO_SetChannelValue+0x70>)
 8000288:	4403      	add	r3, r0
 800028a:	4618      	mov	r0, r3
 800028c:	ea41 0302 	orr.w	r3, r1, r2
 8000290:	6003      	str	r3, [r0, #0]
}
 8000292:	bf00      	nop
 8000294:	3708      	adds	r7, #8
 8000296:	46bd      	mov	sp, r7
 8000298:	bc90      	pop	{r4, r7}
 800029a:	4770      	bx	lr
 800029c:	40020014 	.word	0x40020014

080002a0 <PORT_voidInit>:
#include "PORT_private.h"
#include "PORT_interface.h"


void PORT_voidInit(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
	/* Load the mode to GPIOx_MODER register */
	GPIOA_MODER = GPIOA_Mode;
 80002a4:	4b21      	ldr	r3, [pc, #132]	; (800032c <PORT_voidInit+0x8c>)
 80002a6:	4a22      	ldr	r2, [pc, #136]	; (8000330 <PORT_voidInit+0x90>)
 80002a8:	601a      	str	r2, [r3, #0]
	GPIOB_MODER = GPIOB_Mode;
 80002aa:	4b22      	ldr	r3, [pc, #136]	; (8000334 <PORT_voidInit+0x94>)
 80002ac:	f240 2281 	movw	r2, #641	; 0x281
 80002b0:	601a      	str	r2, [r3, #0]
	GPIOC_MODER = GPIOC_Mode;
 80002b2:	4b21      	ldr	r3, [pc, #132]	; (8000338 <PORT_voidInit+0x98>)
 80002b4:	f04f 42a8 	mov.w	r2, #1409286144	; 0x54000000
 80002b8:	601a      	str	r2, [r3, #0]
	
	/* Load the output type to GPIOx_OTYPER register */
	GPIOA_OTYPER = GPIOA_Output_Type;
 80002ba:	4b20      	ldr	r3, [pc, #128]	; (800033c <PORT_voidInit+0x9c>)
 80002bc:	2200      	movs	r2, #0
 80002be:	601a      	str	r2, [r3, #0]
	GPIOB_OTYPER = GPIOB_Output_Type;
 80002c0:	4b1f      	ldr	r3, [pc, #124]	; (8000340 <PORT_voidInit+0xa0>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
	GPIOC_OTYPER = GPIOC_Output_Type;
 80002c6:	4b1f      	ldr	r3, [pc, #124]	; (8000344 <PORT_voidInit+0xa4>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	601a      	str	r2, [r3, #0]
	
	/* Load Speed to OSPEEDR */
	GPIOA_OSPEEDR = GPIOA_Speed ;
 80002cc:	4b1e      	ldr	r3, [pc, #120]	; (8000348 <PORT_voidInit+0xa8>)
 80002ce:	f06f 5270 	mvn.w	r2, #1006632960	; 0x3c000000
 80002d2:	601a      	str	r2, [r3, #0]
    GPIOB_OSPEEDR = GPIOB_Speed ;
 80002d4:	4b1d      	ldr	r3, [pc, #116]	; (800034c <PORT_voidInit+0xac>)
 80002d6:	4a1e      	ldr	r2, [pc, #120]	; (8000350 <PORT_voidInit+0xb0>)
 80002d8:	601a      	str	r2, [r3, #0]
    GPIOC_OSPEEDR = GPIOC_Speed ;
 80002da:	4b1e      	ldr	r3, [pc, #120]	; (8000354 <PORT_voidInit+0xb4>)
 80002dc:	f04f 427c 	mov.w	r2, #4227858432	; 0xfc000000
 80002e0:	601a      	str	r2, [r3, #0]
	
	/* Load Pull up or Pull down to GPIOx_PUPDR register */
	GPIOA_PUPDR = GPIOA_PUPD ;
 80002e2:	4b1d      	ldr	r3, [pc, #116]	; (8000358 <PORT_voidInit+0xb8>)
 80002e4:	f04f 5210 	mov.w	r2, #603979776	; 0x24000000
 80002e8:	601a      	str	r2, [r3, #0]
	GPIOB_PUPDR = GPIOB_PUPD ;
 80002ea:	4b1c      	ldr	r3, [pc, #112]	; (800035c <PORT_voidInit+0xbc>)
 80002ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80002f0:	601a      	str	r2, [r3, #0]
	GPIOC_PUPDR = GPIOC_PUPD ;
 80002f2:	4b1b      	ldr	r3, [pc, #108]	; (8000360 <PORT_voidInit+0xc0>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOB_LCKR, GPIOx_LCKR_LCKK);
	SET_BIT(GPIOC_LCKR, GPIOx_LCKR_LCKK);
#endif

	/* Alternative function selection */
	GPIOA_AFRL = BitManipulationGetBits(GPIOA_AF, 0, 32);
 80002f8:	4b1a      	ldr	r3, [pc, #104]	; (8000364 <PORT_voidInit+0xc4>)
 80002fa:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 80002fe:	601a      	str	r2, [r3, #0]
	GPIOB_AFRL = BitManipulationGetBits(GPIOB_AF, 0, 32);
 8000300:	4b19      	ldr	r3, [pc, #100]	; (8000368 <PORT_voidInit+0xc8>)
 8000302:	4a1a      	ldr	r2, [pc, #104]	; (800036c <PORT_voidInit+0xcc>)
 8000304:	601a      	str	r2, [r3, #0]
	GPIOC_AFRL = BitManipulationGetBits(GPIOC_AF, 0 ,32);
 8000306:	4b1a      	ldr	r3, [pc, #104]	; (8000370 <PORT_voidInit+0xd0>)
 8000308:	2200      	movs	r2, #0
 800030a:	601a      	str	r2, [r3, #0]
	
	GPIOA_AFRH = BitManipulationGetBits(GPIOA_AF, 32, 32);
 800030c:	4b19      	ldr	r3, [pc, #100]	; (8000374 <PORT_voidInit+0xd4>)
 800030e:	4a1a      	ldr	r2, [pc, #104]	; (8000378 <PORT_voidInit+0xd8>)
 8000310:	601a      	str	r2, [r3, #0]
    GPIOB_AFRH = BitManipulationGetBits(GPIOB_AF, 32, 32);
 8000312:	4b1a      	ldr	r3, [pc, #104]	; (800037c <PORT_voidInit+0xdc>)
 8000314:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 8000318:	601a      	str	r2, [r3, #0]
    GPIOC_AFRH = BitManipulationGetBits(GPIOC_AF, 32, 32);
 800031a:	4b19      	ldr	r3, [pc, #100]	; (8000380 <PORT_voidInit+0xe0>)
 800031c:	4a19      	ldr	r2, [pc, #100]	; (8000384 <PORT_voidInit+0xe4>)
 800031e:	601a      	str	r2, [r3, #0]
	
}
 8000320:	bf00      	nop
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop
 800032c:	40020000 	.word	0x40020000
 8000330:	69555555 	.word	0x69555555
 8000334:	40020400 	.word	0x40020400
 8000338:	40020800 	.word	0x40020800
 800033c:	40020004 	.word	0x40020004
 8000340:	40020404 	.word	0x40020404
 8000344:	40020804 	.word	0x40020804
 8000348:	40020008 	.word	0x40020008
 800034c:	40020408 	.word	0x40020408
 8000350:	555554df 	.word	0x555554df
 8000354:	40020808 	.word	0x40020808
 8000358:	4002000c 	.word	0x4002000c
 800035c:	4002040c 	.word	0x4002040c
 8000360:	4002080c 	.word	0x4002080c
 8000364:	40020020 	.word	0x40020020
 8000368:	40020420 	.word	0x40020420
 800036c:	bbb00bbb 	.word	0xbbb00bbb
 8000370:	40020820 	.word	0x40020820
 8000374:	40020024 	.word	0x40020024
 8000378:	b00bbbbb 	.word	0xb00bbbbb
 800037c:	40020424 	.word	0x40020424
 8000380:	40020824 	.word	0x40020824
 8000384:	bbb00000 	.word	0xbbb00000

08000388 <RCC_voidSysClkInit>:
#include "RCC_config.h"
#include "RCC_interface.h"


void RCC_voidSysClkInit(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0

	
#if HSE_Mode == Enabled || PLL_Source == PLL_HSE

	/* enable HSE source */
	DIGITAL_SET_OR_CLEAR(RCC_CR, RCC_CR_HSEBYP, HSE_Source);
 800038c:	4b19      	ldr	r3, [pc, #100]	; (80003f4 <RCC_voidSysClkInit+0x6c>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a18      	ldr	r2, [pc, #96]	; (80003f4 <RCC_voidSysClkInit+0x6c>)
 8000392:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000396:	6013      	str	r3, [r2, #0]

	/* enable HSE */
	SET_BIT(RCC_CR, RCC_CR_HSEON);                   
 8000398:	4b16      	ldr	r3, [pc, #88]	; (80003f4 <RCC_voidSysClkInit+0x6c>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a15      	ldr	r2, [pc, #84]	; (80003f4 <RCC_voidSysClkInit+0x6c>)
 800039e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80003a2:	6013      	str	r3, [r2, #0]
	
	/* wait until HSE oscillator is stable */
	while(READ_BIT(RCC_CR, RCC_CR_HSERDY) == 0); 
 80003a4:	bf00      	nop
 80003a6:	4b13      	ldr	r3, [pc, #76]	; (80003f4 <RCC_voidSysClkInit+0x6c>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	0c5b      	lsrs	r3, r3, #17
 80003ac:	f003 0301 	and.w	r3, r3, #1
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d0f8      	beq.n	80003a6 <RCC_voidSysClkInit+0x1e>

#endif


	/* Select the SYSCLK Source */
	RCC_CFGR = BitManipulationSetBits(RCC_CFGR, RCC_CFGR_SW0, 2, RCC_SYSCLK);
 80003b4:	4b10      	ldr	r3, [pc, #64]	; (80003f8 <RCC_voidSysClkInit+0x70>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	f023 0303 	bic.w	r3, r3, #3
 80003bc:	4a0e      	ldr	r2, [pc, #56]	; (80003f8 <RCC_voidSysClkInit+0x70>)
 80003be:	f043 0301 	orr.w	r3, r3, #1
 80003c2:	6013      	str	r3, [r2, #0]
	

	/* AHB & APB1 & APB2 Configurations */
	RCC_CFGR = BitManipulationSetBits(RCC_CFGR, RCC_CFGR_PPRE2, 3, APB2_PreScaler);
 80003c4:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <RCC_voidSysClkInit+0x70>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	4a0b      	ldr	r2, [pc, #44]	; (80003f8 <RCC_voidSysClkInit+0x70>)
 80003ca:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80003ce:	6013      	str	r3, [r2, #0]
	RCC_CFGR = BitManipulationSetBits(RCC_CFGR, RCC_CFGR_PPRE1, 3, APB1_PreScaler);
 80003d0:	4b09      	ldr	r3, [pc, #36]	; (80003f8 <RCC_voidSysClkInit+0x70>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a08      	ldr	r2, [pc, #32]	; (80003f8 <RCC_voidSysClkInit+0x70>)
 80003d6:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80003da:	6013      	str	r3, [r2, #0]
	RCC_CFGR = BitManipulationSetBits(RCC_CFGR, RCC_CFGR_HPRE, 4, AHB_PreScaler);
 80003dc:	4b06      	ldr	r3, [pc, #24]	; (80003f8 <RCC_voidSysClkInit+0x70>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a05      	ldr	r2, [pc, #20]	; (80003f8 <RCC_voidSysClkInit+0x70>)
 80003e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80003e6:	6013      	str	r3, [r2, #0]

}
 80003e8:	bf00      	nop
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	40023800 	.word	0x40023800
 80003f8:	40023808 	.word	0x40023808

080003fc <RCC_u8EnablePerClk>:


u8 RCC_u8EnablePerClk(u8 Copy_u8Bus,u8 Copy_u8Peripheral)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b085      	sub	sp, #20
 8000400:	af00      	add	r7, sp, #0
 8000402:	4603      	mov	r3, r0
 8000404:	460a      	mov	r2, r1
 8000406:	71fb      	strb	r3, [r7, #7]
 8000408:	4613      	mov	r3, r2
 800040a:	71bb      	strb	r3, [r7, #6]
	u8 Local_u8ErrorStatus = OK;
 800040c:	2301      	movs	r3, #1
 800040e:	73fb      	strb	r3, [r7, #15]
	
	if(Copy_u8Peripheral < Peripheral_Max_Number)
 8000410:	79bb      	ldrb	r3, [r7, #6]
 8000412:	2b1f      	cmp	r3, #31
 8000414:	d836      	bhi.n	8000484 <RCC_u8EnablePerClk+0x88>
	{
		switch(Copy_u8Bus)
 8000416:	79fb      	ldrb	r3, [r7, #7]
 8000418:	3b01      	subs	r3, #1
 800041a:	2b03      	cmp	r3, #3
 800041c:	d834      	bhi.n	8000488 <RCC_u8EnablePerClk+0x8c>
 800041e:	a201      	add	r2, pc, #4	; (adr r2, 8000424 <RCC_u8EnablePerClk+0x28>)
 8000420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000424:	08000435 	.word	0x08000435
 8000428:	08000449 	.word	0x08000449
 800042c:	0800045d 	.word	0x0800045d
 8000430:	08000471 	.word	0x08000471
		{
			case RCC_AHB1: SET_BIT(RCC_AHB1ENR, Copy_u8Peripheral); break;
 8000434:	4b18      	ldr	r3, [pc, #96]	; (8000498 <RCC_u8EnablePerClk+0x9c>)
 8000436:	681a      	ldr	r2, [r3, #0]
 8000438:	79bb      	ldrb	r3, [r7, #6]
 800043a:	2101      	movs	r1, #1
 800043c:	fa01 f303 	lsl.w	r3, r1, r3
 8000440:	4915      	ldr	r1, [pc, #84]	; (8000498 <RCC_u8EnablePerClk+0x9c>)
 8000442:	4313      	orrs	r3, r2
 8000444:	600b      	str	r3, [r1, #0]
 8000446:	e01f      	b.n	8000488 <RCC_u8EnablePerClk+0x8c>
			case RCC_AHB2: SET_BIT(RCC_AHB2ENR, Copy_u8Peripheral); break;
 8000448:	4b14      	ldr	r3, [pc, #80]	; (800049c <RCC_u8EnablePerClk+0xa0>)
 800044a:	681a      	ldr	r2, [r3, #0]
 800044c:	79bb      	ldrb	r3, [r7, #6]
 800044e:	2101      	movs	r1, #1
 8000450:	fa01 f303 	lsl.w	r3, r1, r3
 8000454:	4911      	ldr	r1, [pc, #68]	; (800049c <RCC_u8EnablePerClk+0xa0>)
 8000456:	4313      	orrs	r3, r2
 8000458:	600b      	str	r3, [r1, #0]
 800045a:	e015      	b.n	8000488 <RCC_u8EnablePerClk+0x8c>
			case RCC_APB1: SET_BIT(RCC_APB1ENR, Copy_u8Peripheral); break;
 800045c:	4b10      	ldr	r3, [pc, #64]	; (80004a0 <RCC_u8EnablePerClk+0xa4>)
 800045e:	681a      	ldr	r2, [r3, #0]
 8000460:	79bb      	ldrb	r3, [r7, #6]
 8000462:	2101      	movs	r1, #1
 8000464:	fa01 f303 	lsl.w	r3, r1, r3
 8000468:	490d      	ldr	r1, [pc, #52]	; (80004a0 <RCC_u8EnablePerClk+0xa4>)
 800046a:	4313      	orrs	r3, r2
 800046c:	600b      	str	r3, [r1, #0]
 800046e:	e00b      	b.n	8000488 <RCC_u8EnablePerClk+0x8c>
			case RCC_APB2: SET_BIT(RCC_APB2ENR, Copy_u8Peripheral); break;
 8000470:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <RCC_u8EnablePerClk+0xa8>)
 8000472:	681a      	ldr	r2, [r3, #0]
 8000474:	79bb      	ldrb	r3, [r7, #6]
 8000476:	2101      	movs	r1, #1
 8000478:	fa01 f303 	lsl.w	r3, r1, r3
 800047c:	4909      	ldr	r1, [pc, #36]	; (80004a4 <RCC_u8EnablePerClk+0xa8>)
 800047e:	4313      	orrs	r3, r2
 8000480:	600b      	str	r3, [r1, #0]
 8000482:	e001      	b.n	8000488 <RCC_u8EnablePerClk+0x8c>
		}
	}
	else
	{
		Local_u8ErrorStatus = NOK;
 8000484:	2302      	movs	r3, #2
 8000486:	73fb      	strb	r3, [r7, #15]
	}
	
	return Local_u8ErrorStatus;
 8000488:	7bfb      	ldrb	r3, [r7, #15]
}
 800048a:	4618      	mov	r0, r3
 800048c:	3714      	adds	r7, #20
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	40023830 	.word	0x40023830
 800049c:	40023834 	.word	0x40023834
 80004a0:	40023840 	.word	0x40023840
 80004a4:	40023844 	.word	0x40023844

080004a8 <SevSeg_DipalyNumber>:
#include "SevSeg_private.h"
#include "SevSeg_config.h"


void SevSeg_DipalyNumber(SevSeg Copy_SevSeg, u8 Copy_u8Number)
{
 80004a8:	b590      	push	{r4, r7, lr}
 80004aa:	b087      	sub	sp, #28
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	f107 0308 	add.w	r3, r7, #8
 80004b2:	e883 0003 	stmia.w	r3, {r0, r1}
 80004b6:	4613      	mov	r3, r2
 80004b8:	71fb      	strb	r3, [r7, #7]
	/* 
		This Equation is used to limit the indices used to the array if the user entered a wrong index. 
		if the user entered a number between 0 - 10 the SSD will display the the corresponding value of this index.
		but if the user entered a number greater than the array size the index will be the index of Error.
	*/
	u8 SSD_NUMBER_INDEX = ((Copy_u8Number <= SSD_MAX_DISPLAY) * Copy_u8Number) + (SSD_ERROR_INDEX * (Copy_u8Number > SSD_MAX_DISPLAY));
 80004ba:	79fb      	ldrb	r3, [r7, #7]
 80004bc:	2b09      	cmp	r3, #9
 80004be:	d801      	bhi.n	80004c4 <SevSeg_DipalyNumber+0x1c>
 80004c0:	79fb      	ldrb	r3, [r7, #7]
 80004c2:	e000      	b.n	80004c6 <SevSeg_DipalyNumber+0x1e>
 80004c4:	2300      	movs	r3, #0
 80004c6:	79fa      	ldrb	r2, [r7, #7]
 80004c8:	2a09      	cmp	r2, #9
 80004ca:	d901      	bls.n	80004d0 <SevSeg_DipalyNumber+0x28>
 80004cc:	220a      	movs	r2, #10
 80004ce:	e000      	b.n	80004d2 <SevSeg_DipalyNumber+0x2a>
 80004d0:	2200      	movs	r2, #0
 80004d2:	4413      	add	r3, r2
 80004d4:	75fb      	strb	r3, [r7, #23]
	
	GPIO_SetPinValue(Copy_SevSeg.Enable_port, Copy_SevSeg.Enable_Pin, READ_BIT(Copy_SevSeg.Mode, 0));
 80004d6:	7af8      	ldrb	r0, [r7, #11]
 80004d8:	7b39      	ldrb	r1, [r7, #12]
 80004da:	7a3b      	ldrb	r3, [r7, #8]
 80004dc:	b29b      	uxth	r3, r3
 80004de:	f003 0301 	and.w	r3, r3, #1
 80004e2:	b29b      	uxth	r3, r3
 80004e4:	461a      	mov	r2, r3
 80004e6:	f7ff fe75 	bl	80001d4 <GPIO_SetPinValue>
	
	GPIO_SetChannelValue(Copy_SevSeg.Port, Copy_SevSeg.Starting_Pin, 8, (Copy_SevSeg.Mode) ^ (SSD_NUMBER_ARRAY[SSD_NUMBER_INDEX]));
 80004ea:	7a78      	ldrb	r0, [r7, #9]
 80004ec:	7ab9      	ldrb	r1, [r7, #10]
 80004ee:	7a3b      	ldrb	r3, [r7, #8]
 80004f0:	b29a      	uxth	r2, r3
 80004f2:	7dfb      	ldrb	r3, [r7, #23]
 80004f4:	4c05      	ldr	r4, [pc, #20]	; (800050c <SevSeg_DipalyNumber+0x64>)
 80004f6:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 80004fa:	4053      	eors	r3, r2
 80004fc:	b29b      	uxth	r3, r3
 80004fe:	2208      	movs	r2, #8
 8000500:	f7ff fe94 	bl	800022c <GPIO_SetChannelValue>
}
 8000504:	bf00      	nop
 8000506:	371c      	adds	r7, #28
 8000508:	46bd      	mov	sp, r7
 800050a:	bd90      	pop	{r4, r7, pc}
 800050c:	20000000 	.word	0x20000000

08000510 <main>:
#include "SevSeg_interface.h"

void Delay();

int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
	/* RCC System clock init */
	RCC_voidSysClkInit();
 8000516:	f7ff ff37 	bl	8000388 <RCC_voidSysClkInit>

	/* RCC Peripheral clock init */
	RCC_u8EnablePerClk(RCC_AHB1, AHB1_GPIOA);
 800051a:	2100      	movs	r1, #0
 800051c:	2001      	movs	r0, #1
 800051e:	f7ff ff6d 	bl	80003fc <RCC_u8EnablePerClk>
	RCC_u8EnablePerClk(RCC_AHB1, AHB1_GPIOB);
 8000522:	2101      	movs	r1, #1
 8000524:	2001      	movs	r0, #1
 8000526:	f7ff ff69 	bl	80003fc <RCC_u8EnablePerClk>
	RCC_u8EnablePerClk(RCC_AHB1, AHB1_GPIOC);
 800052a:	2102      	movs	r1, #2
 800052c:	2001      	movs	r0, #1
 800052e:	f7ff ff65 	bl	80003fc <RCC_u8EnablePerClk>

	/* Port init */
	PORT_voidInit();
 8000532:	f7ff feb5 	bl	80002a0 <PORT_voidInit>

	SevSeg SSG = {Common_Anode_Mode, GPIO_PORTA, GPIO_PORTA_Pin0, GPIO_PORTB, GPIO_PORTB_Pin0};
 8000536:	4a1e      	ldr	r2, [pc, #120]	; (80005b0 <main+0xa0>)
 8000538:	463b      	mov	r3, r7
 800053a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800053e:	6018      	str	r0, [r3, #0]
 8000540:	3304      	adds	r3, #4
 8000542:	7019      	strb	r1, [r3, #0]

	while(1)
	{
		GPIO_SetPinValue(GPIO_PORTA, GPIO_PORTA_Pin15, GPIO_PIN_HIGH);
 8000544:	2201      	movs	r2, #1
 8000546:	210f      	movs	r1, #15
 8000548:	2000      	movs	r0, #0
 800054a:	f7ff fe43 	bl	80001d4 <GPIO_SetPinValue>
		SevSeg_DipalyNumber(SSG, 8);
 800054e:	2208      	movs	r2, #8
 8000550:	463b      	mov	r3, r7
 8000552:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000556:	f7ff ffa7 	bl	80004a8 <SevSeg_DipalyNumber>
		Delay();
 800055a:	f000 f82b 	bl	80005b4 <Delay>
		SevSeg_DipalyNumber(SSG, 0);
 800055e:	2200      	movs	r2, #0
 8000560:	463b      	mov	r3, r7
 8000562:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000566:	f7ff ff9f 	bl	80004a8 <SevSeg_DipalyNumber>
		Delay();
 800056a:	f000 f823 	bl	80005b4 <Delay>
		SevSeg_DipalyNumber(SSG, 1);
 800056e:	2201      	movs	r2, #1
 8000570:	463b      	mov	r3, r7
 8000572:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000576:	f7ff ff97 	bl	80004a8 <SevSeg_DipalyNumber>
		Delay();
 800057a:	f000 f81b 	bl	80005b4 <Delay>
		SevSeg_DipalyNumber(SSG, 9);
 800057e:	2209      	movs	r2, #9
 8000580:	463b      	mov	r3, r7
 8000582:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000586:	f7ff ff8f 	bl	80004a8 <SevSeg_DipalyNumber>
		Delay();
 800058a:	f000 f813 	bl	80005b4 <Delay>
		SevSeg_DipalyNumber(SSG, 6);
 800058e:	2206      	movs	r2, #6
 8000590:	463b      	mov	r3, r7
 8000592:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000596:	f7ff ff87 	bl	80004a8 <SevSeg_DipalyNumber>
		Delay();
 800059a:	f000 f80b 	bl	80005b4 <Delay>
		SevSeg_DipalyNumber(SSG, 23);
 800059e:	2217      	movs	r2, #23
 80005a0:	463b      	mov	r3, r7
 80005a2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80005a6:	f7ff ff7f 	bl	80004a8 <SevSeg_DipalyNumber>
		Delay();
 80005aa:	f000 f803 	bl	80005b4 <Delay>
		GPIO_SetPinValue(GPIO_PORTA, GPIO_PORTA_Pin15, GPIO_PIN_HIGH);
 80005ae:	e7c9      	b.n	8000544 <main+0x34>
 80005b0:	08000698 	.word	0x08000698

080005b4 <Delay>:

	return 0;
}

void Delay()
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
	for(int i=0; i<2000000; i++)
 80005ba:	2300      	movs	r3, #0
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	e003      	b.n	80005c8 <Delay+0x14>
	{
		asm("NOP");
 80005c0:	bf00      	nop
	for(int i=0; i<2000000; i++)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	3301      	adds	r3, #1
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	4a05      	ldr	r2, [pc, #20]	; (80005e0 <Delay+0x2c>)
 80005cc:	4293      	cmp	r3, r2
 80005ce:	ddf7      	ble.n	80005c0 <Delay+0xc>
	}
}
 80005d0:	bf00      	nop
 80005d2:	bf00      	nop
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	001e847f 	.word	0x001e847f

080005e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005e4:	480d      	ldr	r0, [pc, #52]	; (800061c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005e6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005e8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005ec:	480c      	ldr	r0, [pc, #48]	; (8000620 <LoopForever+0x6>)
  ldr r1, =_edata
 80005ee:	490d      	ldr	r1, [pc, #52]	; (8000624 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005f0:	4a0d      	ldr	r2, [pc, #52]	; (8000628 <LoopForever+0xe>)
  movs r3, #0
 80005f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f4:	e002      	b.n	80005fc <LoopCopyDataInit>

080005f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005fa:	3304      	adds	r3, #4

080005fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000600:	d3f9      	bcc.n	80005f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000602:	4a0a      	ldr	r2, [pc, #40]	; (800062c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000604:	4c0a      	ldr	r4, [pc, #40]	; (8000630 <LoopForever+0x16>)
  movs r3, #0
 8000606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000608:	e001      	b.n	800060e <LoopFillZerobss>

0800060a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800060a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800060c:	3204      	adds	r2, #4

0800060e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800060e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000610:	d3fb      	bcc.n	800060a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000612:	f000 f811 	bl	8000638 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000616:	f7ff ff7b 	bl	8000510 <main>

0800061a <LoopForever>:

LoopForever:
    b LoopForever
 800061a:	e7fe      	b.n	800061a <LoopForever>
  ldr   r0, =_estack
 800061c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000624:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000628:	080006a8 	.word	0x080006a8
  ldr r2, =_sbss
 800062c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000630:	20000034 	.word	0x20000034

08000634 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000634:	e7fe      	b.n	8000634 <ADC_IRQHandler>
	...

08000638 <__libc_init_array>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	4d0d      	ldr	r5, [pc, #52]	; (8000670 <__libc_init_array+0x38>)
 800063c:	4c0d      	ldr	r4, [pc, #52]	; (8000674 <__libc_init_array+0x3c>)
 800063e:	1b64      	subs	r4, r4, r5
 8000640:	10a4      	asrs	r4, r4, #2
 8000642:	2600      	movs	r6, #0
 8000644:	42a6      	cmp	r6, r4
 8000646:	d109      	bne.n	800065c <__libc_init_array+0x24>
 8000648:	4d0b      	ldr	r5, [pc, #44]	; (8000678 <__libc_init_array+0x40>)
 800064a:	4c0c      	ldr	r4, [pc, #48]	; (800067c <__libc_init_array+0x44>)
 800064c:	f000 f818 	bl	8000680 <_init>
 8000650:	1b64      	subs	r4, r4, r5
 8000652:	10a4      	asrs	r4, r4, #2
 8000654:	2600      	movs	r6, #0
 8000656:	42a6      	cmp	r6, r4
 8000658:	d105      	bne.n	8000666 <__libc_init_array+0x2e>
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000660:	4798      	blx	r3
 8000662:	3601      	adds	r6, #1
 8000664:	e7ee      	b.n	8000644 <__libc_init_array+0xc>
 8000666:	f855 3b04 	ldr.w	r3, [r5], #4
 800066a:	4798      	blx	r3
 800066c:	3601      	adds	r6, #1
 800066e:	e7f2      	b.n	8000656 <__libc_init_array+0x1e>
 8000670:	080006a0 	.word	0x080006a0
 8000674:	080006a0 	.word	0x080006a0
 8000678:	080006a0 	.word	0x080006a0
 800067c:	080006a4 	.word	0x080006a4

08000680 <_init>:
 8000680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000682:	bf00      	nop
 8000684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000686:	bc08      	pop	{r3}
 8000688:	469e      	mov	lr, r3
 800068a:	4770      	bx	lr

0800068c <_fini>:
 800068c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800068e:	bf00      	nop
 8000690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000692:	bc08      	pop	{r3}
 8000694:	469e      	mov	lr, r3
 8000696:	4770      	bx	lr
