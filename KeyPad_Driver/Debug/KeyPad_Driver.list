
KeyPad_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000600  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08000794  08000794  00010794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800079c  0800079c  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  0800079c  0800079c  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800079c  0800079c  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800079c  0800079c  0001079c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080007a0  080007a0  000107a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  080007a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000030  080007d4  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000004c  080007d4  0002004c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000083e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000458  00000000  00000000  0002089e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000120  00000000  00000000  00020cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000b8  00000000  00000000  00020e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001e5a  00000000  00000000  00020ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000007d8  00000000  00000000  00022d2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008695  00000000  00000000  00023502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0002bb97  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000027c  00000000  00000000  0002bbe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000030 	.word	0x20000030
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800077c 	.word	0x0800077c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000034 	.word	0x20000034
 80001d0:	0800077c 	.word	0x0800077c

080001d4 <GPIO_SetPinValue>:

#include "GPIO_registers.h"
#include "GPIO_interface.h"

void GPIO_SetPinValue(u8 Copy_u8PortName, u8 Copy_u8PinNumber, u16 Copy_u8Value)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
 80001de:	460b      	mov	r3, r1
 80001e0:	71bb      	strb	r3, [r7, #6]
 80001e2:	4613      	mov	r3, r2
 80001e4:	80bb      	strh	r3, [r7, #4]
	if(Copy_u8Value == GPIO_PIN_HIGH)
 80001e6:	88bb      	ldrh	r3, [r7, #4]
 80001e8:	2b01      	cmp	r3, #1
 80001ea:	d114      	bne.n	8000216 <GPIO_SetPinValue+0x42>
	{
		SET_BIT(GPIOx_BSRR_Set(Copy_u8PortName), Copy_u8PinNumber);
 80001ec:	79fb      	ldrb	r3, [r7, #7]
 80001ee:	029b      	lsls	r3, r3, #10
 80001f0:	461a      	mov	r2, r3
 80001f2:	4b16      	ldr	r3, [pc, #88]	; (800024c <GPIO_SetPinValue+0x78>)
 80001f4:	4413      	add	r3, r2
 80001f6:	881b      	ldrh	r3, [r3, #0]
 80001f8:	b299      	uxth	r1, r3
 80001fa:	79bb      	ldrb	r3, [r7, #6]
 80001fc:	2201      	movs	r2, #1
 80001fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000202:	b29a      	uxth	r2, r3
 8000204:	79fb      	ldrb	r3, [r7, #7]
 8000206:	029b      	lsls	r3, r3, #10
 8000208:	4618      	mov	r0, r3
 800020a:	4b10      	ldr	r3, [pc, #64]	; (800024c <GPIO_SetPinValue+0x78>)
 800020c:	4403      	add	r3, r0
 800020e:	430a      	orrs	r2, r1
 8000210:	b292      	uxth	r2, r2
 8000212:	801a      	strh	r2, [r3, #0]
	}
	else
	{
		SET_BIT(GPIOx_BSRR_Reset(Copy_u8PortName), Copy_u8PinNumber);
	}
}
 8000214:	e013      	b.n	800023e <GPIO_SetPinValue+0x6a>
		SET_BIT(GPIOx_BSRR_Reset(Copy_u8PortName), Copy_u8PinNumber);
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	029b      	lsls	r3, r3, #10
 800021a:	461a      	mov	r2, r3
 800021c:	4b0c      	ldr	r3, [pc, #48]	; (8000250 <GPIO_SetPinValue+0x7c>)
 800021e:	4413      	add	r3, r2
 8000220:	881b      	ldrh	r3, [r3, #0]
 8000222:	b299      	uxth	r1, r3
 8000224:	79bb      	ldrb	r3, [r7, #6]
 8000226:	2201      	movs	r2, #1
 8000228:	fa02 f303 	lsl.w	r3, r2, r3
 800022c:	b29a      	uxth	r2, r3
 800022e:	79fb      	ldrb	r3, [r7, #7]
 8000230:	029b      	lsls	r3, r3, #10
 8000232:	4618      	mov	r0, r3
 8000234:	4b06      	ldr	r3, [pc, #24]	; (8000250 <GPIO_SetPinValue+0x7c>)
 8000236:	4403      	add	r3, r0
 8000238:	430a      	orrs	r2, r1
 800023a:	b292      	uxth	r2, r2
 800023c:	801a      	strh	r2, [r3, #0]
}
 800023e:	bf00      	nop
 8000240:	370c      	adds	r7, #12
 8000242:	46bd      	mov	sp, r7
 8000244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000248:	4770      	bx	lr
 800024a:	bf00      	nop
 800024c:	40020018 	.word	0x40020018
 8000250:	4002001a 	.word	0x4002001a

08000254 <GPIO_SetChannelValue>:

void GPIO_SetChannelValue(u8 Copy_u8PortName, u8 Copy_u8PinNumber, u8 Copy_u8ChannelLength, u16 Copy_u8Value)
{
 8000254:	b490      	push	{r4, r7}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
 800025a:	4604      	mov	r4, r0
 800025c:	4608      	mov	r0, r1
 800025e:	4611      	mov	r1, r2
 8000260:	461a      	mov	r2, r3
 8000262:	4623      	mov	r3, r4
 8000264:	71fb      	strb	r3, [r7, #7]
 8000266:	4603      	mov	r3, r0
 8000268:	71bb      	strb	r3, [r7, #6]
 800026a:	460b      	mov	r3, r1
 800026c:	717b      	strb	r3, [r7, #5]
 800026e:	4613      	mov	r3, r2
 8000270:	807b      	strh	r3, [r7, #2]
	GPIOx_BSRR_Set(Copy_u8PortName)   = BitManipulationSetBits(GPIOx_BSRR_Set(Copy_u8PortName), Copy_u8PinNumber, Copy_u8ChannelLength, Copy_u8Value);
 8000272:	79fb      	ldrb	r3, [r7, #7]
 8000274:	029b      	lsls	r3, r3, #10
 8000276:	461a      	mov	r2, r3
 8000278:	4b28      	ldr	r3, [pc, #160]	; (800031c <GPIO_SetChannelValue+0xc8>)
 800027a:	4413      	add	r3, r2
 800027c:	881b      	ldrh	r3, [r3, #0]
 800027e:	b29a      	uxth	r2, r3
 8000280:	797b      	ldrb	r3, [r7, #5]
 8000282:	2101      	movs	r1, #1
 8000284:	fa01 f303 	lsl.w	r3, r1, r3
 8000288:	1e59      	subs	r1, r3, #1
 800028a:	79bb      	ldrb	r3, [r7, #6]
 800028c:	fa01 f303 	lsl.w	r3, r1, r3
 8000290:	b29b      	uxth	r3, r3
 8000292:	43db      	mvns	r3, r3
 8000294:	b29b      	uxth	r3, r3
 8000296:	4013      	ands	r3, r2
 8000298:	b299      	uxth	r1, r3
 800029a:	887a      	ldrh	r2, [r7, #2]
 800029c:	797b      	ldrb	r3, [r7, #5]
 800029e:	f04f 30ff 	mov.w	r0, #4294967295
 80002a2:	fa00 f303 	lsl.w	r3, r0, r3
 80002a6:	43db      	mvns	r3, r3
 80002a8:	401a      	ands	r2, r3
 80002aa:	79bb      	ldrb	r3, [r7, #6]
 80002ac:	fa02 f303 	lsl.w	r3, r2, r3
 80002b0:	b29a      	uxth	r2, r3
 80002b2:	79fb      	ldrb	r3, [r7, #7]
 80002b4:	029b      	lsls	r3, r3, #10
 80002b6:	4618      	mov	r0, r3
 80002b8:	4b18      	ldr	r3, [pc, #96]	; (800031c <GPIO_SetChannelValue+0xc8>)
 80002ba:	4403      	add	r3, r0
 80002bc:	430a      	orrs	r2, r1
 80002be:	b292      	uxth	r2, r2
 80002c0:	801a      	strh	r2, [r3, #0]
	GPIOx_BSRR_Reset(Copy_u8PortName) = BitManipulationSetBits(GPIOx_BSRR_Reset(Copy_u8PortName), Copy_u8PinNumber, Copy_u8ChannelLength, ~(Copy_u8Value));
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	029b      	lsls	r3, r3, #10
 80002c6:	461a      	mov	r2, r3
 80002c8:	4b15      	ldr	r3, [pc, #84]	; (8000320 <GPIO_SetChannelValue+0xcc>)
 80002ca:	4413      	add	r3, r2
 80002cc:	881b      	ldrh	r3, [r3, #0]
 80002ce:	b29a      	uxth	r2, r3
 80002d0:	797b      	ldrb	r3, [r7, #5]
 80002d2:	2101      	movs	r1, #1
 80002d4:	fa01 f303 	lsl.w	r3, r1, r3
 80002d8:	1e59      	subs	r1, r3, #1
 80002da:	79bb      	ldrb	r3, [r7, #6]
 80002dc:	fa01 f303 	lsl.w	r3, r1, r3
 80002e0:	b29b      	uxth	r3, r3
 80002e2:	43db      	mvns	r3, r3
 80002e4:	b29b      	uxth	r3, r3
 80002e6:	4013      	ands	r3, r2
 80002e8:	b299      	uxth	r1, r3
 80002ea:	887a      	ldrh	r2, [r7, #2]
 80002ec:	797b      	ldrb	r3, [r7, #5]
 80002ee:	f04f 30ff 	mov.w	r0, #4294967295
 80002f2:	fa00 f303 	lsl.w	r3, r0, r3
 80002f6:	4313      	orrs	r3, r2
 80002f8:	43da      	mvns	r2, r3
 80002fa:	79bb      	ldrb	r3, [r7, #6]
 80002fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000300:	b29a      	uxth	r2, r3
 8000302:	79fb      	ldrb	r3, [r7, #7]
 8000304:	029b      	lsls	r3, r3, #10
 8000306:	4618      	mov	r0, r3
 8000308:	4b05      	ldr	r3, [pc, #20]	; (8000320 <GPIO_SetChannelValue+0xcc>)
 800030a:	4403      	add	r3, r0
 800030c:	430a      	orrs	r2, r1
 800030e:	b292      	uxth	r2, r2
 8000310:	801a      	strh	r2, [r3, #0]
	/* GPIOx_ODR(Copy_u8PortName) = BitManipulationSetBits(GPIOx_ODR(Copy_u8PortName), Copy_u8PinNumber, Copy_u8ChannelLength, Copy_u8Value); */
}
 8000312:	bf00      	nop
 8000314:	3708      	adds	r7, #8
 8000316:	46bd      	mov	sp, r7
 8000318:	bc90      	pop	{r4, r7}
 800031a:	4770      	bx	lr
 800031c:	40020018 	.word	0x40020018
 8000320:	4002001a 	.word	0x4002001a

08000324 <GPIO_GetPinValue>:
	GPIOx_BSRR_Reset(Copy_u8PortName) = ~(Copy_u8Value);
	/* GPIOx_ODR(Copy_u8PortName) = Copy_u8value; */
}

u8 GPIO_GetPinValue(u8 Copy_u8PortName, u8 Copy_u8PinNumber, u16* Copy_pu8Value)
{
 8000324:	b480      	push	{r7}
 8000326:	b085      	sub	sp, #20
 8000328:	af00      	add	r7, sp, #0
 800032a:	4603      	mov	r3, r0
 800032c:	603a      	str	r2, [r7, #0]
 800032e:	71fb      	strb	r3, [r7, #7]
 8000330:	460b      	mov	r3, r1
 8000332:	71bb      	strb	r3, [r7, #6]
	u8 Local_u8ErrorStatus = OK;
 8000334:	2301      	movs	r3, #1
 8000336:	73fb      	strb	r3, [r7, #15]
	
	if(Copy_pu8Value != NULL)
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	2b00      	cmp	r3, #0
 800033c:	d00f      	beq.n	800035e <GPIO_GetPinValue+0x3a>
	{
		(*Copy_pu8Value) = READ_BIT(GPIOx_IDR(Copy_u8PortName), Copy_u8PinNumber);
 800033e:	79fb      	ldrb	r3, [r7, #7]
 8000340:	029b      	lsls	r3, r3, #10
 8000342:	461a      	mov	r2, r3
 8000344:	4b0a      	ldr	r3, [pc, #40]	; (8000370 <GPIO_GetPinValue+0x4c>)
 8000346:	4413      	add	r3, r2
 8000348:	681a      	ldr	r2, [r3, #0]
 800034a:	79bb      	ldrb	r3, [r7, #6]
 800034c:	fa22 f303 	lsr.w	r3, r2, r3
 8000350:	b29b      	uxth	r3, r3
 8000352:	f003 0301 	and.w	r3, r3, #1
 8000356:	b29a      	uxth	r2, r3
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	801a      	strh	r2, [r3, #0]
 800035c:	e001      	b.n	8000362 <GPIO_GetPinValue+0x3e>
	}
	else
	{
		Local_u8ErrorStatus = NULL_POINTER;
 800035e:	2303      	movs	r3, #3
 8000360:	73fb      	strb	r3, [r7, #15]
	}
	
	return Local_u8ErrorStatus;
 8000362:	7bfb      	ldrb	r3, [r7, #15]
}
 8000364:	4618      	mov	r0, r3
 8000366:	3714      	adds	r7, #20
 8000368:	46bd      	mov	sp, r7
 800036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036e:	4770      	bx	lr
 8000370:	40020010 	.word	0x40020010

08000374 <KPD_GetPressedKey>:
#include "KeyPad_config.h"
#include "KeyPad_interface.h"
#include "KeyPad_private.h"

u8 KPD_GetPressedKey()
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
	/* Variable to hold the pressed key */
	u8 Local_u8PressedKey = KPD_NO_PRESSED_KEY;
 800037a:	23ff      	movs	r3, #255	; 0xff
 800037c:	717b      	strb	r3, [r7, #5]
	/* Arrays to hold the pins for the rows and columns */
	/* NOTE: go to " KeyPad_config.h " to choose the pins used in hardware */
	static u8 Local_u8KPDColumnArr[KPD_COLUMN_NUMBER] = {KPD_COLUMN0_PIN, KPD_COLUMN1_PIN, KPD_COLUMN2_PIN, KPD_COLUMN3_PIN};
	static u8 Local_u8KPDRowArr[KPD_ROW_NUMBER]       = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};
	
	for(Local_u8ColumnIndex = 0; Local_u8ColumnIndex < KPD_COLUMN_NUMBER; Local_u8ColumnIndex++)
 800037e:	2300      	movs	r3, #0
 8000380:	71bb      	strb	r3, [r7, #6]
 8000382:	e03c      	b.n	80003fe <KPD_GetPressedKey+0x8a>
	{
		/* Activate current Column */
		GPIO_SetPinValue(KPD_COLUMNS_PORT, Local_u8KPDColumnArr[Local_u8ColumnIndex], GPIO_PIN_LOW);
 8000384:	79bb      	ldrb	r3, [r7, #6]
 8000386:	4a22      	ldr	r2, [pc, #136]	; (8000410 <KPD_GetPressedKey+0x9c>)
 8000388:	5cd3      	ldrb	r3, [r2, r3]
 800038a:	2200      	movs	r2, #0
 800038c:	4619      	mov	r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	f7ff ff20 	bl	80001d4 <GPIO_SetPinValue>
		
		for(Local_u8RowIndex = 0; Local_u8RowIndex < KPD_ROW_NUMBER; Local_u8RowIndex++)
 8000394:	2300      	movs	r3, #0
 8000396:	71fb      	strb	r3, [r7, #7]
 8000398:	e023      	b.n	80003e2 <KPD_GetPressedKey+0x6e>
		{
			/* Read current Row */
			GPIO_GetPinValue(KPD_ROWS_PORT, Local_u8KPDRowArr[Local_u8RowIndex], &Local_u16PinState);
 800039a:	79fb      	ldrb	r3, [r7, #7]
 800039c:	4a1d      	ldr	r2, [pc, #116]	; (8000414 <KPD_GetPressedKey+0xa0>)
 800039e:	5cd3      	ldrb	r3, [r2, r3]
 80003a0:	1cba      	adds	r2, r7, #2
 80003a2:	4619      	mov	r1, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	f7ff ffbd 	bl	8000324 <GPIO_GetPinValue>
			
			/* Check the PIN Value */
			if(GPIO_PIN_LOW == Local_u16PinState)
 80003aa:	887b      	ldrh	r3, [r7, #2]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d115      	bne.n	80003dc <KPD_GetPressedKey+0x68>
			{
				/* Polling(Busy Waiting) --> waiting for the user to release the button */
				while(GPIO_PIN_LOW == Local_u16PinState) GPIO_GetPinValue(KPD_ROWS_PORT, Local_u8KPDRowArr[Local_u8RowIndex], &Local_u16PinState);
 80003b0:	e007      	b.n	80003c2 <KPD_GetPressedKey+0x4e>
 80003b2:	79fb      	ldrb	r3, [r7, #7]
 80003b4:	4a17      	ldr	r2, [pc, #92]	; (8000414 <KPD_GetPressedKey+0xa0>)
 80003b6:	5cd3      	ldrb	r3, [r2, r3]
 80003b8:	1cba      	adds	r2, r7, #2
 80003ba:	4619      	mov	r1, r3
 80003bc:	2001      	movs	r0, #1
 80003be:	f7ff ffb1 	bl	8000324 <GPIO_GetPinValue>
 80003c2:	887b      	ldrh	r3, [r7, #2]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d0f4      	beq.n	80003b2 <KPD_GetPressedKey+0x3e>

				/* Put the value of the pressed key in the variable responsible for holding the pressed key */
				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowIndex][Local_u8ColumnIndex];
 80003c8:	79fa      	ldrb	r2, [r7, #7]
 80003ca:	79bb      	ldrb	r3, [r7, #6]
 80003cc:	4912      	ldr	r1, [pc, #72]	; (8000418 <KPD_GetPressedKey+0xa4>)
 80003ce:	0092      	lsls	r2, r2, #2
 80003d0:	440a      	add	r2, r1
 80003d2:	4413      	add	r3, r2
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	717b      	strb	r3, [r7, #5]

				/* return for the function as I don't want to check the others conditions */
				return Local_u8PressedKey;
 80003d8:	797b      	ldrb	r3, [r7, #5]
 80003da:	e014      	b.n	8000406 <KPD_GetPressedKey+0x92>
		for(Local_u8RowIndex = 0; Local_u8RowIndex < KPD_ROW_NUMBER; Local_u8RowIndex++)
 80003dc:	79fb      	ldrb	r3, [r7, #7]
 80003de:	3301      	adds	r3, #1
 80003e0:	71fb      	strb	r3, [r7, #7]
 80003e2:	79fb      	ldrb	r3, [r7, #7]
 80003e4:	2b03      	cmp	r3, #3
 80003e6:	d9d8      	bls.n	800039a <KPD_GetPressedKey+0x26>
			}
		}
		
		/* Deactivate current Column */
		GPIO_SetPinValue(KPD_COLUMNS_PORT, Local_u8KPDColumnArr[Local_u8ColumnIndex], GPIO_PIN_HIGH);
 80003e8:	79bb      	ldrb	r3, [r7, #6]
 80003ea:	4a09      	ldr	r2, [pc, #36]	; (8000410 <KPD_GetPressedKey+0x9c>)
 80003ec:	5cd3      	ldrb	r3, [r2, r3]
 80003ee:	2201      	movs	r2, #1
 80003f0:	4619      	mov	r1, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	f7ff feee 	bl	80001d4 <GPIO_SetPinValue>
	for(Local_u8ColumnIndex = 0; Local_u8ColumnIndex < KPD_COLUMN_NUMBER; Local_u8ColumnIndex++)
 80003f8:	79bb      	ldrb	r3, [r7, #6]
 80003fa:	3301      	adds	r3, #1
 80003fc:	71bb      	strb	r3, [r7, #6]
 80003fe:	79bb      	ldrb	r3, [r7, #6]
 8000400:	2b03      	cmp	r3, #3
 8000402:	d9bf      	bls.n	8000384 <KPD_GetPressedKey+0x10>
	}
	
	
	return Local_u8PressedKey;
 8000404:	797b      	ldrb	r3, [r7, #5]
}
 8000406:	4618      	mov	r0, r3
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	20000000 	.word	0x20000000
 8000414:	20000004 	.word	0x20000004
 8000418:	20000008 	.word	0x20000008

0800041c <PORT_voidInit>:
#include "PORT_private.h"
#include "PORT_interface.h"


void PORT_voidInit(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
	/* Load the mode to GPIOx_MODER register */
	GPIOA_MODER = GPIOA_Mode;
 8000420:	4b20      	ldr	r3, [pc, #128]	; (80004a4 <PORT_voidInit+0x88>)
 8000422:	4a21      	ldr	r2, [pc, #132]	; (80004a8 <PORT_voidInit+0x8c>)
 8000424:	601a      	str	r2, [r3, #0]
	GPIOB_MODER = GPIOB_Mode;
 8000426:	4b21      	ldr	r3, [pc, #132]	; (80004ac <PORT_voidInit+0x90>)
 8000428:	f241 6295 	movw	r2, #5781	; 0x1695
 800042c:	601a      	str	r2, [r3, #0]
	GPIOC_MODER = GPIOC_Mode;
 800042e:	4b20      	ldr	r3, [pc, #128]	; (80004b0 <PORT_voidInit+0x94>)
 8000430:	2200      	movs	r2, #0
 8000432:	601a      	str	r2, [r3, #0]
	
	/* Load the output type to GPIOx_OTYPER register */
	GPIOA_OTYPER = GPIOA_Output_Type;
 8000434:	4b1f      	ldr	r3, [pc, #124]	; (80004b4 <PORT_voidInit+0x98>)
 8000436:	2200      	movs	r2, #0
 8000438:	601a      	str	r2, [r3, #0]
	GPIOB_OTYPER = GPIOB_Output_Type;
 800043a:	4b1f      	ldr	r3, [pc, #124]	; (80004b8 <PORT_voidInit+0x9c>)
 800043c:	2200      	movs	r2, #0
 800043e:	601a      	str	r2, [r3, #0]
	GPIOC_OTYPER = GPIOC_Output_Type;
 8000440:	4b1e      	ldr	r3, [pc, #120]	; (80004bc <PORT_voidInit+0xa0>)
 8000442:	2200      	movs	r2, #0
 8000444:	601a      	str	r2, [r3, #0]
	
	/* Load Speed to OSPEEDR */
	GPIOA_OSPEEDR = GPIOA_Speed ;
 8000446:	4b1e      	ldr	r3, [pc, #120]	; (80004c0 <PORT_voidInit+0xa4>)
 8000448:	f06f 5270 	mvn.w	r2, #1006632960	; 0x3c000000
 800044c:	601a      	str	r2, [r3, #0]
    GPIOB_OSPEEDR = GPIOB_Speed ;
 800044e:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <PORT_voidInit+0xa8>)
 8000450:	f46f 7240 	mvn.w	r2, #768	; 0x300
 8000454:	601a      	str	r2, [r3, #0]
    GPIOC_OSPEEDR = GPIOC_Speed ;
 8000456:	4b1c      	ldr	r3, [pc, #112]	; (80004c8 <PORT_voidInit+0xac>)
 8000458:	f04f 427c 	mov.w	r2, #4227858432	; 0xfc000000
 800045c:	601a      	str	r2, [r3, #0]
	
	/* Load Pull up or Pull down to GPIOx_PUPDR register */
	GPIOA_PUPDR = GPIOA_PUPD ;
 800045e:	4b1b      	ldr	r3, [pc, #108]	; (80004cc <PORT_voidInit+0xb0>)
 8000460:	f04f 5210 	mov.w	r2, #603979776	; 0x24000000
 8000464:	601a      	str	r2, [r3, #0]
	GPIOB_PUPDR = GPIOB_PUPD ;
 8000466:	4b1a      	ldr	r3, [pc, #104]	; (80004d0 <PORT_voidInit+0xb4>)
 8000468:	4a1a      	ldr	r2, [pc, #104]	; (80004d4 <PORT_voidInit+0xb8>)
 800046a:	601a      	str	r2, [r3, #0]
	GPIOC_PUPDR = GPIOC_PUPD ;
 800046c:	4b1a      	ldr	r3, [pc, #104]	; (80004d8 <PORT_voidInit+0xbc>)
 800046e:	2200      	movs	r2, #0
 8000470:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOB_LCKR, GPIOx_LCKR_LCKK);
	SET_BIT(GPIOC_LCKR, GPIOx_LCKR_LCKK);
#endif

	/* Alternative function selection */
	GPIOA_AFRL = BitManipulationGetBits(GPIOA_AF, 0, 32);
 8000472:	4b1a      	ldr	r3, [pc, #104]	; (80004dc <PORT_voidInit+0xc0>)
 8000474:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 8000478:	601a      	str	r2, [r3, #0]
	GPIOB_AFRL = BitManipulationGetBits(GPIOB_AF, 0, 32);
 800047a:	4b19      	ldr	r3, [pc, #100]	; (80004e0 <PORT_voidInit+0xc4>)
 800047c:	4a19      	ldr	r2, [pc, #100]	; (80004e4 <PORT_voidInit+0xc8>)
 800047e:	601a      	str	r2, [r3, #0]
	GPIOC_AFRL = BitManipulationGetBits(GPIOC_AF, 0 ,32);
 8000480:	4b19      	ldr	r3, [pc, #100]	; (80004e8 <PORT_voidInit+0xcc>)
 8000482:	2200      	movs	r2, #0
 8000484:	601a      	str	r2, [r3, #0]
	
	GPIOA_AFRH = BitManipulationGetBits(GPIOA_AF, 32, 32);
 8000486:	4b19      	ldr	r3, [pc, #100]	; (80004ec <PORT_voidInit+0xd0>)
 8000488:	4a19      	ldr	r2, [pc, #100]	; (80004f0 <PORT_voidInit+0xd4>)
 800048a:	601a      	str	r2, [r3, #0]
    GPIOB_AFRH = BitManipulationGetBits(GPIOB_AF, 32, 32);
 800048c:	4b19      	ldr	r3, [pc, #100]	; (80004f4 <PORT_voidInit+0xd8>)
 800048e:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
 8000492:	601a      	str	r2, [r3, #0]
    GPIOC_AFRH = BitManipulationGetBits(GPIOC_AF, 32, 32);
 8000494:	4b18      	ldr	r3, [pc, #96]	; (80004f8 <PORT_voidInit+0xdc>)
 8000496:	4a19      	ldr	r2, [pc, #100]	; (80004fc <PORT_voidInit+0xe0>)
 8000498:	601a      	str	r2, [r3, #0]
	
}
 800049a:	bf00      	nop
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr
 80004a4:	40020000 	.word	0x40020000
 80004a8:	28005555 	.word	0x28005555
 80004ac:	40020400 	.word	0x40020400
 80004b0:	40020800 	.word	0x40020800
 80004b4:	40020004 	.word	0x40020004
 80004b8:	40020404 	.word	0x40020404
 80004bc:	40020804 	.word	0x40020804
 80004c0:	40020008 	.word	0x40020008
 80004c4:	40020408 	.word	0x40020408
 80004c8:	40020808 	.word	0x40020808
 80004cc:	4002000c 	.word	0x4002000c
 80004d0:	4002040c 	.word	0x4002040c
 80004d4:	00154100 	.word	0x00154100
 80004d8:	4002080c 	.word	0x4002080c
 80004dc:	40020020 	.word	0x40020020
 80004e0:	40020420 	.word	0x40020420
 80004e4:	bbb00bbb 	.word	0xbbb00bbb
 80004e8:	40020820 	.word	0x40020820
 80004ec:	40020024 	.word	0x40020024
 80004f0:	b00bbbbb 	.word	0xb00bbbbb
 80004f4:	40020424 	.word	0x40020424
 80004f8:	40020824 	.word	0x40020824
 80004fc:	bbb00000 	.word	0xbbb00000

08000500 <RCC_voidSysClkInit>:
#include "RCC_config.h"
#include "RCC_interface.h"


void RCC_voidSysClkInit(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0

	
#if HSE_Mode == Enabled || PLL_Source == PLL_HSE

	/* enable HSE source */
	DIGITAL_SET_OR_CLEAR(RCC_CR, RCC_CR_HSEBYP, HSE_Source);
 8000504:	4b19      	ldr	r3, [pc, #100]	; (800056c <RCC_voidSysClkInit+0x6c>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a18      	ldr	r2, [pc, #96]	; (800056c <RCC_voidSysClkInit+0x6c>)
 800050a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800050e:	6013      	str	r3, [r2, #0]

	/* enable HSE */
	SET_BIT(RCC_CR, RCC_CR_HSEON);                   
 8000510:	4b16      	ldr	r3, [pc, #88]	; (800056c <RCC_voidSysClkInit+0x6c>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a15      	ldr	r2, [pc, #84]	; (800056c <RCC_voidSysClkInit+0x6c>)
 8000516:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800051a:	6013      	str	r3, [r2, #0]
	
	/* wait until HSE oscillator is stable */
	while(READ_BIT(RCC_CR, RCC_CR_HSERDY) == 0); 
 800051c:	bf00      	nop
 800051e:	4b13      	ldr	r3, [pc, #76]	; (800056c <RCC_voidSysClkInit+0x6c>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	0c5b      	lsrs	r3, r3, #17
 8000524:	f003 0301 	and.w	r3, r3, #1
 8000528:	2b00      	cmp	r3, #0
 800052a:	d0f8      	beq.n	800051e <RCC_voidSysClkInit+0x1e>

#endif


	/* Select the SYSCLK Source */
	RCC_CFGR = BitManipulationSetBits(RCC_CFGR, RCC_CFGR_SW0, 2, RCC_SYSCLK);
 800052c:	4b10      	ldr	r3, [pc, #64]	; (8000570 <RCC_voidSysClkInit+0x70>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	f023 0303 	bic.w	r3, r3, #3
 8000534:	4a0e      	ldr	r2, [pc, #56]	; (8000570 <RCC_voidSysClkInit+0x70>)
 8000536:	f043 0301 	orr.w	r3, r3, #1
 800053a:	6013      	str	r3, [r2, #0]
	

	/* AHB & APB1 & APB2 Configurations */
	RCC_CFGR = BitManipulationSetBits(RCC_CFGR, RCC_CFGR_PPRE2, 3, APB2_PreScaler);
 800053c:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <RCC_voidSysClkInit+0x70>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a0b      	ldr	r2, [pc, #44]	; (8000570 <RCC_voidSysClkInit+0x70>)
 8000542:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000546:	6013      	str	r3, [r2, #0]
	RCC_CFGR = BitManipulationSetBits(RCC_CFGR, RCC_CFGR_PPRE1, 3, APB1_PreScaler);
 8000548:	4b09      	ldr	r3, [pc, #36]	; (8000570 <RCC_voidSysClkInit+0x70>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a08      	ldr	r2, [pc, #32]	; (8000570 <RCC_voidSysClkInit+0x70>)
 800054e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000552:	6013      	str	r3, [r2, #0]
	RCC_CFGR = BitManipulationSetBits(RCC_CFGR, RCC_CFGR_HPRE, 4, AHB_PreScaler);
 8000554:	4b06      	ldr	r3, [pc, #24]	; (8000570 <RCC_voidSysClkInit+0x70>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a05      	ldr	r2, [pc, #20]	; (8000570 <RCC_voidSysClkInit+0x70>)
 800055a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800055e:	6013      	str	r3, [r2, #0]

}
 8000560:	bf00      	nop
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	40023800 	.word	0x40023800
 8000570:	40023808 	.word	0x40023808

08000574 <RCC_u8EnablePerClk>:


u8 RCC_u8EnablePerClk(u8 Copy_u8Bus,u8 Copy_u8Peripheral)
{
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	460a      	mov	r2, r1
 800057e:	71fb      	strb	r3, [r7, #7]
 8000580:	4613      	mov	r3, r2
 8000582:	71bb      	strb	r3, [r7, #6]
	u8 Local_u8ErrorStatus = OK;
 8000584:	2301      	movs	r3, #1
 8000586:	73fb      	strb	r3, [r7, #15]
	
	if(Copy_u8Peripheral < Peripheral_Max_Number)
 8000588:	79bb      	ldrb	r3, [r7, #6]
 800058a:	2b1f      	cmp	r3, #31
 800058c:	d836      	bhi.n	80005fc <RCC_u8EnablePerClk+0x88>
	{
		switch(Copy_u8Bus)
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	3b01      	subs	r3, #1
 8000592:	2b03      	cmp	r3, #3
 8000594:	d834      	bhi.n	8000600 <RCC_u8EnablePerClk+0x8c>
 8000596:	a201      	add	r2, pc, #4	; (adr r2, 800059c <RCC_u8EnablePerClk+0x28>)
 8000598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800059c:	080005ad 	.word	0x080005ad
 80005a0:	080005c1 	.word	0x080005c1
 80005a4:	080005d5 	.word	0x080005d5
 80005a8:	080005e9 	.word	0x080005e9
		{
			case RCC_AHB1: SET_BIT(RCC_AHB1ENR, Copy_u8Peripheral); break;
 80005ac:	4b18      	ldr	r3, [pc, #96]	; (8000610 <RCC_u8EnablePerClk+0x9c>)
 80005ae:	681a      	ldr	r2, [r3, #0]
 80005b0:	79bb      	ldrb	r3, [r7, #6]
 80005b2:	2101      	movs	r1, #1
 80005b4:	fa01 f303 	lsl.w	r3, r1, r3
 80005b8:	4915      	ldr	r1, [pc, #84]	; (8000610 <RCC_u8EnablePerClk+0x9c>)
 80005ba:	4313      	orrs	r3, r2
 80005bc:	600b      	str	r3, [r1, #0]
 80005be:	e01f      	b.n	8000600 <RCC_u8EnablePerClk+0x8c>
			case RCC_AHB2: SET_BIT(RCC_AHB2ENR, Copy_u8Peripheral); break;
 80005c0:	4b14      	ldr	r3, [pc, #80]	; (8000614 <RCC_u8EnablePerClk+0xa0>)
 80005c2:	681a      	ldr	r2, [r3, #0]
 80005c4:	79bb      	ldrb	r3, [r7, #6]
 80005c6:	2101      	movs	r1, #1
 80005c8:	fa01 f303 	lsl.w	r3, r1, r3
 80005cc:	4911      	ldr	r1, [pc, #68]	; (8000614 <RCC_u8EnablePerClk+0xa0>)
 80005ce:	4313      	orrs	r3, r2
 80005d0:	600b      	str	r3, [r1, #0]
 80005d2:	e015      	b.n	8000600 <RCC_u8EnablePerClk+0x8c>
			case RCC_APB1: SET_BIT(RCC_APB1ENR, Copy_u8Peripheral); break;
 80005d4:	4b10      	ldr	r3, [pc, #64]	; (8000618 <RCC_u8EnablePerClk+0xa4>)
 80005d6:	681a      	ldr	r2, [r3, #0]
 80005d8:	79bb      	ldrb	r3, [r7, #6]
 80005da:	2101      	movs	r1, #1
 80005dc:	fa01 f303 	lsl.w	r3, r1, r3
 80005e0:	490d      	ldr	r1, [pc, #52]	; (8000618 <RCC_u8EnablePerClk+0xa4>)
 80005e2:	4313      	orrs	r3, r2
 80005e4:	600b      	str	r3, [r1, #0]
 80005e6:	e00b      	b.n	8000600 <RCC_u8EnablePerClk+0x8c>
			case RCC_APB2: SET_BIT(RCC_APB2ENR, Copy_u8Peripheral); break;
 80005e8:	4b0c      	ldr	r3, [pc, #48]	; (800061c <RCC_u8EnablePerClk+0xa8>)
 80005ea:	681a      	ldr	r2, [r3, #0]
 80005ec:	79bb      	ldrb	r3, [r7, #6]
 80005ee:	2101      	movs	r1, #1
 80005f0:	fa01 f303 	lsl.w	r3, r1, r3
 80005f4:	4909      	ldr	r1, [pc, #36]	; (800061c <RCC_u8EnablePerClk+0xa8>)
 80005f6:	4313      	orrs	r3, r2
 80005f8:	600b      	str	r3, [r1, #0]
 80005fa:	e001      	b.n	8000600 <RCC_u8EnablePerClk+0x8c>
		}
	}
	else
	{
		Local_u8ErrorStatus = NOK;
 80005fc:	2302      	movs	r3, #2
 80005fe:	73fb      	strb	r3, [r7, #15]
	}
	
	return Local_u8ErrorStatus;
 8000600:	7bfb      	ldrb	r3, [r7, #15]
}
 8000602:	4618      	mov	r0, r3
 8000604:	3714      	adds	r7, #20
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	40023830 	.word	0x40023830
 8000614:	40023834 	.word	0x40023834
 8000618:	40023840 	.word	0x40023840
 800061c:	40023844 	.word	0x40023844

08000620 <SevSeg_DipalyNumber>:
#include "SevSeg_private.h"
#include "SevSeg_config.h"


void SevSeg_DipalyNumber(SevSeg Copy_SevSeg, u8 Copy_u8Number)
{
 8000620:	b590      	push	{r4, r7, lr}
 8000622:	b087      	sub	sp, #28
 8000624:	af00      	add	r7, sp, #0
 8000626:	f107 0308 	add.w	r3, r7, #8
 800062a:	e883 0003 	stmia.w	r3, {r0, r1}
 800062e:	4613      	mov	r3, r2
 8000630:	71fb      	strb	r3, [r7, #7]
	/* 
		This Equation is used to limit the indices used to the array if the user entered a wrong index. 
		if the user entered a number between 0 - 10 the SSD will display the the corresponding value of this index.
		but if the user entered a number greater than the array size the index will be the index of Error.
	*/
	u8 SSD_NUMBER_INDEX = ((Copy_u8Number <= SSD_MAX_DISPLAY) * Copy_u8Number) + (SSD_ERROR_INDEX * (Copy_u8Number > SSD_MAX_DISPLAY));
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	2b09      	cmp	r3, #9
 8000636:	d801      	bhi.n	800063c <SevSeg_DipalyNumber+0x1c>
 8000638:	79fb      	ldrb	r3, [r7, #7]
 800063a:	e000      	b.n	800063e <SevSeg_DipalyNumber+0x1e>
 800063c:	2300      	movs	r3, #0
 800063e:	79fa      	ldrb	r2, [r7, #7]
 8000640:	2a09      	cmp	r2, #9
 8000642:	d901      	bls.n	8000648 <SevSeg_DipalyNumber+0x28>
 8000644:	220a      	movs	r2, #10
 8000646:	e000      	b.n	800064a <SevSeg_DipalyNumber+0x2a>
 8000648:	2200      	movs	r2, #0
 800064a:	4413      	add	r3, r2
 800064c:	75fb      	strb	r3, [r7, #23]
	
	GPIO_SetPinValue(Copy_SevSeg.Enable_port, Copy_SevSeg.Enable_Pin, READ_BIT(Copy_SevSeg.Mode, 0));
 800064e:	7af8      	ldrb	r0, [r7, #11]
 8000650:	7b39      	ldrb	r1, [r7, #12]
 8000652:	7a3b      	ldrb	r3, [r7, #8]
 8000654:	b29b      	uxth	r3, r3
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	b29b      	uxth	r3, r3
 800065c:	461a      	mov	r2, r3
 800065e:	f7ff fdb9 	bl	80001d4 <GPIO_SetPinValue>
	
	GPIO_SetChannelValue(Copy_SevSeg.Port, Copy_SevSeg.Starting_Pin, 8, (Copy_SevSeg.Mode) ^ (SSD_NUMBER_ARRAY[SSD_NUMBER_INDEX]));
 8000662:	7a78      	ldrb	r0, [r7, #9]
 8000664:	7ab9      	ldrb	r1, [r7, #10]
 8000666:	7a3b      	ldrb	r3, [r7, #8]
 8000668:	b29a      	uxth	r2, r3
 800066a:	7dfb      	ldrb	r3, [r7, #23]
 800066c:	4c05      	ldr	r4, [pc, #20]	; (8000684 <SevSeg_DipalyNumber+0x64>)
 800066e:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 8000672:	4053      	eors	r3, r2
 8000674:	b29b      	uxth	r3, r3
 8000676:	2208      	movs	r2, #8
 8000678:	f7ff fdec 	bl	8000254 <GPIO_SetChannelValue>
}
 800067c:	bf00      	nop
 800067e:	371c      	adds	r7, #28
 8000680:	46bd      	mov	sp, r7
 8000682:	bd90      	pop	{r4, r7, pc}
 8000684:	20000018 	.word	0x20000018

08000688 <main>:
#include "KeyPad_interface.h"

void Delay();

int main(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
	u8 Local_u8Data;

	/* RCC System clock init */
	RCC_voidSysClkInit();
 800068e:	f7ff ff37 	bl	8000500 <RCC_voidSysClkInit>

	/* RCC Peripheral clock init */
	RCC_u8EnablePerClk(RCC_AHB1, AHB1_GPIOA);
 8000692:	2100      	movs	r1, #0
 8000694:	2001      	movs	r0, #1
 8000696:	f7ff ff6d 	bl	8000574 <RCC_u8EnablePerClk>
	RCC_u8EnablePerClk(RCC_AHB1, AHB1_GPIOB);
 800069a:	2101      	movs	r1, #1
 800069c:	2001      	movs	r0, #1
 800069e:	f7ff ff69 	bl	8000574 <RCC_u8EnablePerClk>
	RCC_u8EnablePerClk(RCC_AHB1, AHB1_GPIOC);
 80006a2:	2102      	movs	r1, #2
 80006a4:	2001      	movs	r0, #1
 80006a6:	f7ff ff65 	bl	8000574 <RCC_u8EnablePerClk>

	/* Port init */
	PORT_voidInit();
 80006aa:	f7ff feb7 	bl	800041c <PORT_voidInit>

	SevSeg SSG = {Common_Anode_Mode, GPIO_PORTA, GPIO_PORTA_Pin0, GPIO_PORTB, GPIO_PORTB_Pin0};
 80006ae:	4a0b      	ldr	r2, [pc, #44]	; (80006dc <main+0x54>)
 80006b0:	463b      	mov	r3, r7
 80006b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006b6:	6018      	str	r0, [r3, #0]
 80006b8:	3304      	adds	r3, #4
 80006ba:	7019      	strb	r1, [r3, #0]

	while(1)
	{
		do
		{
				Local_u8Data = KPD_GetPressedKey();
 80006bc:	f7ff fe5a 	bl	8000374 <KPD_GetPressedKey>
 80006c0:	4603      	mov	r3, r0
 80006c2:	71fb      	strb	r3, [r7, #7]
		}while(Local_u8Data == KPD_NO_PRESSED_KEY);
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	2bff      	cmp	r3, #255	; 0xff
 80006c8:	d0f8      	beq.n	80006bc <main+0x34>

		SevSeg_DipalyNumber(SSG, Local_u8Data);
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	461a      	mov	r2, r3
 80006ce:	463b      	mov	r3, r7
 80006d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006d4:	f7ff ffa4 	bl	8000620 <SevSeg_DipalyNumber>
	while(1)
 80006d8:	e7f0      	b.n	80006bc <main+0x34>
 80006da:	bf00      	nop
 80006dc:	08000794 	.word	0x08000794

080006e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006e0:	480d      	ldr	r0, [pc, #52]	; (8000718 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006e2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006e4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006e8:	480c      	ldr	r0, [pc, #48]	; (800071c <LoopForever+0x6>)
  ldr r1, =_edata
 80006ea:	490d      	ldr	r1, [pc, #52]	; (8000720 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006ec:	4a0d      	ldr	r2, [pc, #52]	; (8000724 <LoopForever+0xe>)
  movs r3, #0
 80006ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006f0:	e002      	b.n	80006f8 <LoopCopyDataInit>

080006f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006f6:	3304      	adds	r3, #4

080006f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006fc:	d3f9      	bcc.n	80006f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006fe:	4a0a      	ldr	r2, [pc, #40]	; (8000728 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000700:	4c0a      	ldr	r4, [pc, #40]	; (800072c <LoopForever+0x16>)
  movs r3, #0
 8000702:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000704:	e001      	b.n	800070a <LoopFillZerobss>

08000706 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000706:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000708:	3204      	adds	r2, #4

0800070a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800070a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800070c:	d3fb      	bcc.n	8000706 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800070e:	f000 f811 	bl	8000734 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000712:	f7ff ffb9 	bl	8000688 <main>

08000716 <LoopForever>:

LoopForever:
    b LoopForever
 8000716:	e7fe      	b.n	8000716 <LoopForever>
  ldr   r0, =_estack
 8000718:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800071c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000720:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8000724:	080007a4 	.word	0x080007a4
  ldr r2, =_sbss
 8000728:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 800072c:	2000004c 	.word	0x2000004c

08000730 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000730:	e7fe      	b.n	8000730 <ADC_IRQHandler>
	...

08000734 <__libc_init_array>:
 8000734:	b570      	push	{r4, r5, r6, lr}
 8000736:	4d0d      	ldr	r5, [pc, #52]	; (800076c <__libc_init_array+0x38>)
 8000738:	4c0d      	ldr	r4, [pc, #52]	; (8000770 <__libc_init_array+0x3c>)
 800073a:	1b64      	subs	r4, r4, r5
 800073c:	10a4      	asrs	r4, r4, #2
 800073e:	2600      	movs	r6, #0
 8000740:	42a6      	cmp	r6, r4
 8000742:	d109      	bne.n	8000758 <__libc_init_array+0x24>
 8000744:	4d0b      	ldr	r5, [pc, #44]	; (8000774 <__libc_init_array+0x40>)
 8000746:	4c0c      	ldr	r4, [pc, #48]	; (8000778 <__libc_init_array+0x44>)
 8000748:	f000 f818 	bl	800077c <_init>
 800074c:	1b64      	subs	r4, r4, r5
 800074e:	10a4      	asrs	r4, r4, #2
 8000750:	2600      	movs	r6, #0
 8000752:	42a6      	cmp	r6, r4
 8000754:	d105      	bne.n	8000762 <__libc_init_array+0x2e>
 8000756:	bd70      	pop	{r4, r5, r6, pc}
 8000758:	f855 3b04 	ldr.w	r3, [r5], #4
 800075c:	4798      	blx	r3
 800075e:	3601      	adds	r6, #1
 8000760:	e7ee      	b.n	8000740 <__libc_init_array+0xc>
 8000762:	f855 3b04 	ldr.w	r3, [r5], #4
 8000766:	4798      	blx	r3
 8000768:	3601      	adds	r6, #1
 800076a:	e7f2      	b.n	8000752 <__libc_init_array+0x1e>
 800076c:	0800079c 	.word	0x0800079c
 8000770:	0800079c 	.word	0x0800079c
 8000774:	0800079c 	.word	0x0800079c
 8000778:	080007a0 	.word	0x080007a0

0800077c <_init>:
 800077c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800077e:	bf00      	nop
 8000780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000782:	bc08      	pop	{r3}
 8000784:	469e      	mov	lr, r3
 8000786:	4770      	bx	lr

08000788 <_fini>:
 8000788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800078a:	bf00      	nop
 800078c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800078e:	bc08      	pop	{r3}
 8000790:	469e      	mov	lr, r3
 8000792:	4770      	bx	lr
